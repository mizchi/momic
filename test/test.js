// Generated by CoffeeScript 1.7.1
(function() {
  describe('Momic.Collection', function() {
    describe('.dequal', function() {
      return it('should fill left statements', function() {
        expect(Momic.Collection.dequal('foo', 'foo')).eq(true);
        expect(Momic.Collection.dequal('foo', 'bar')).eq(false);
        expect(Momic.Collection.dequal({
          a: 1
        }, {
          a: 1
        })).eq(true);
        expect(Momic.Collection.dequal({
          a: 1
        }, {
          a: 2
        })).eq(false);
        expect(Momic.Collection.dequal({
          a: 1
        }, {
          a: 1,
          b: 2
        })).eq(true);
        expect(Momic.Collection.dequal({
          a: 1,
          b: ''
        }, {
          a: 1
        })).eq(false);
        expect(Momic.Collection.dequal({
          a: {
            b: 1
          }
        }, {
          a: {
            b: 1
          }
        })).eq(true);
        expect(Momic.Collection.dequal({
          a: {
            b: 1
          }
        }, 1)).eq(false);
        expect(Momic.Collection.dequal({
          a: {
            b: 1
          }
        }, {})).eq(false);
        expect(Momic.Collection.dequal({
          a: {
            b: 1
          },
          c: 2
        }, {
          a: {
            b: 1
          },
          c: 2
        })).eq(true);
        return expect(Momic.Collection.dequal({
          a: {
            b: 1
          },
          c: 3
        }, {
          a: {
            b: 1
          },
          c: 2
        })).eq(false);
      });
    });
    describe('Momic.DB', function() {
      beforeEach(function(done) {
        localforage.setDriver('localStorageWrapper');
        return localforage.clear((function(_this) {
          return function() {
            return done();
          };
        })(this));
      });
      it('no opts', function(done) {
        var db;
        db = new Momic.DB();
        expect(db.initialized).to.not.be.ok;
        return db.init().then((function(_this) {
          return function() {
            expect(db).to.be.an.instanceOf(Momic.DB);
            expect(db.initialized).to.be.ok;
            return done();
          };
        })(this));
      });
      it('use reserved word as collection name', function() {
        return expect(function() {
          var db;
          return db = new Momic.DB({
            collections: {
              prefix: {}
            }
          });
        })["throw"](Error);
      });
      it('initialize with collections', function(done) {
        var db;
        db = new Momic.DB({
          collections: {
            items: {}
          }
        });
        return db.init().then(function() {
          expect(db).to.have.property('items');
          expect(db.items).to.be.an.instanceOf(Momic.Collection);
          return done();
        });
      });
      it('add collection berfore init', function(done) {
        var db;
        db = new Momic.DB();
        db.addCollection('items', {});
        expect(db.items._instance).to.eql(null);
        return db.init().then(function() {
          expect(db).to.property('items');
          expect(db.items).to.be.instanceOf(Momic.Collection);
          expect(db.items._instance).to.eql([]);
          return done();
        });
      });
      return it('add collection after init', function(done) {
        var db;
        db = new Momic.DB();
        return db.init().then(function() {
          return db.addCollection("items", {}).then(function() {
            expect(db.items._instance).to.eql([]);
            return done();
          });
        });
      });
    });
    return context('with localStorageWrapper', function() {
      beforeEach(function(done) {
        this.db = null;
        localforage.setDriver('localStorageWrapper');
        return localforage.clear((function(_this) {
          return function() {
            _this.db = new Momic.DB({
              name: 'app',
              collections: {
                items: {}
              }
            });
            return _this.db.init().then(function() {
              return done();
            });
          };
        })(this));
      });
      describe('#addPlugin', function() {
        beforeEach(function() {
          var PostSavePlugin;
          PostSavePlugin = {
            initialize: function() {},
            preSaveHook: function() {},
            postSaveHook: function() {},
            preInsertHook: function() {},
            preUpdateHook: function() {}
          };
          this.mock = sinon.mock(PostSavePlugin);
          this.db.items.addPlugin(PostSavePlugin);
          return this.db.items.autoSave = false;
        });
        xit('should call postSaveHook and preSaveHook', function(done) {
          this.mock.expects('initialize').once();
          this.mock.expects('preSaveHook').once();
          this.mock.expects('postSaveHook').once();
          return this.db.items.save().then((function(_this) {
            return function() {
              return _this.mock.verify();
            };
          })(this));
        });
        xit('should call preInsertHook at insertion', function(done) {
          this.mock.expects('preSaveHook').twice();
          return this.db.items.insert([
            {
              n: 1
            }, {
              n: 2
            }
          ]).then(function() {
            return this.mock.verify();
          });
        });
        return xit('should call preUpdateHook at updating', function(done) {
          this.mock.expects('postSaveHook').once();
          return this.db.items.insert([
            {
              id: 1
            }, {
              id: 2
            }
          ]).then(function() {
            return this.db.items.insert({
              id: 1,
              foo: 'bar'
            }).then((function(_this) {
              return function() {
                return _this.mock.verify();
              };
            })(this));
          });
        });
      });
      describe('#insert', function() {
        it('should insert item', function(done) {
          return this.db.items.insert({
            foo: 1,
            bar: 2,
            baz: 3
          }).then((function(_this) {
            return function() {
              return _this.db.items.findOne().then(function(item) {
                expect(item.foo).eq(1);
                expect(item.bar).eq(2);
                expect(item.baz).eq(3);
                return done();
              });
            };
          })(this));
        });
        it('should insert one item with object as argument', function(done) {
          return this.db.items.insert({
            foo: 'bar'
          }).then((function(_this) {
            return function() {
              expect(_this.db.items.count()).eq(1);
              return done();
            };
          })(this));
        });
        it('should insert one item with array as argument', function(done) {
          return this.db.items.insert([
            {
              foo: 'bar'
            }, {
              foo: 'baz'
            }
          ]).then((function(_this) {
            return function() {
              expect(_this.db.items.count()).eq(2);
              return done();
            };
          })(this));
        });
        it('should create id at inserting unless id', function(done) {
          return this.db.items.insert({
            foo: 'bar'
          }).then((function(_this) {
            return function() {
              return _this.db.items.findOne().then(function(item) {
                expect(item).to.have.property('id').that.is.a('string');
                return done();
              });
            };
          })(this));
        });
        return it('should not create id at inserting with id', function(done) {
          return this.db.items.insert({
            foo: 'bar',
            id: 'thisisid'
          }).then((function(_this) {
            return function() {
              return _this.db.items.findOne().then(function(item) {
                expect(item.id).eq('thisisid');
                return done();
              });
            };
          })(this));
        });
      });
      describe('#saved', function() {
        beforeEach(function() {
          return this.db.items.autoSave = false;
        });
        return it('should return false when items is not saved', function() {
          expect(this.db.items.saved()).eq(true);
          expect(this.db.items.count()).eq(0);
          return this.db.items.insert().then((function(_this) {
            return function() {
              expect(_this.db.items.saved()).eq(false);
              expect(_this.db.items.count()).eq(1);
              return _this.db.items.save().then(function() {
                return expect(_this.db.items.saved()).eq(true);
              });
            };
          })(this));
        });
      });
      describe('#find', function() {
        beforeEach(function(done) {
          return this.db.items.insert([
            {
              foo: 1,
              bar: 'a'
            }, {
              foo: 2,
              bar: 'b'
            }, {
              foo: 3,
              bar: 'c'
            }
          ]).then((function(_this) {
            return function() {
              return done();
            };
          })(this));
        });
        it('should fetch all with no args', function(done) {
          return this.db.items.find().then((function(_this) {
            return function() {
              expect(_this.db.items.count()).eq(3);
              return done();
            };
          })(this));
        });
        it('should fetch items by json argument', function(done) {
          return this.db.items.find({
            foo: 1
          }).then((function(_this) {
            return function(_arg) {
              var item;
              item = _arg[0];
              expect(item.foo).eq(1);
              expect(item.bar).eq('a');
              return done();
            };
          })(this));
        });
        return it('should fetch items by filter function', function(done) {
          return this.db.items.find((function(_this) {
            return function(item) {
              return item.foo > 1;
            };
          })(this)).then((function(_this) {
            return function(items) {
              expect(items.length).eq(2);
              return done();
            };
          })(this));
        });
      });
      describe('#findOne', function() {
        beforeEach(function(done) {
          return this.db.items.insert([
            {
              foo: 1,
              bar: 'a'
            }, {
              foo: 2,
              bar: 'b'
            }, {
              foo: 3,
              bar: 'c'
            }
          ]).then((function(_this) {
            return function() {
              return done();
            };
          })(this));
        });
        return it('should fetch one item of #find result', function(done) {
          return this.db.items.findOne((function(_this) {
            return function(item) {
              return item.foo > 2;
            };
          })(this)).then((function(_this) {
            return function(item) {
              expect(item.foo).eq(3);
              return done();
            };
          })(this));
        });
      });
      describe('#remove', function() {
        beforeEach(function(done) {
          return this.db.items.insert([
            {
              foo: 1,
              bar: 'a'
            }, {
              foo: 2,
              bar: 'b'
            }, {
              foo: 3,
              bar: 'c'
            }
          ]).then((function(_this) {
            return function() {
              return done();
            };
          })(this));
        });
        return it('should remove items by same argument with #find', function(done) {
          return this.db.items.remove((function(_this) {
            return function(item) {
              return item.foo > 1;
            };
          })(this)).then((function(_this) {
            return function() {
              return _this.db.items.find().then(function(items) {
                expect(items.length).eq(1);
                return done();
              });
            };
          })(this));
        });
      });
      return describe('#update', function() {
        beforeEach(function(done) {
          return this.db.items.insert([
            {
              foo: 1,
              bar: 'a'
            }, {
              foo: 2,
              bar: 'b'
            }, {
              foo: 3,
              bar: 'c'
            }
          ]).then((function(_this) {
            return function() {
              return done();
            };
          })(this));
        });
        it('should rewrite object by id', function(done) {
          return this.db.items.findOne({
            foo: 1
          }).then((function(_this) {
            return function(item) {
              return _this.db.items.update({
                id: item.id,
                foo: 42
              }).then(function() {
                return _this.db.items.findOne({
                  bar: 'a'
                }).then(function(modified) {
                  expect(modified.foo).eq(42);
                  expect(modified.bar).eq('a');
                  return done();
                });
              });
            };
          })(this));
        });
        return it('should rewrite object by id with array argument', function(done) {
          return this.db.items.find().then((function(_this) {
            return function(items) {
              var insertions;
              insertions = items.map(function(i) {
                return {
                  id: i.id,
                  foo: 42
                };
              });
              return _this.db.items.update(insertions).then(function() {
                return _this.db.items.find().then(function(modifiedItems) {
                  expect(modifiedItems.map(function(i) {
                    return i.foo;
                  })).deep.equal([42, 42, 42]);
                  return done();
                });
              });
            };
          })(this));
        });
      });
    });
  });

}).call(this);
